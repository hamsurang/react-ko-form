name: Sync Upstream and Create PR

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      # ---------- 공통 ----------
      - name: Checkout fork
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name  "minchodang"
          git config user.email "minsu910725@gmail.com"

      - name: Add upstream remote
        run: |
          git remote add upstream https://github.com/react-hook-form/documentation
          git fetch upstream

      # ---------- master 동기화 ----------
      - name: Checkout master
        run: git checkout -B master origin/master

      - name: Merge upstream/master
        shell: bash
        run: |
          git merge upstream/master -X theirs --no-edit
          for DIR in .github .vscode; do
            git rm -r --cached "$DIR" || true
            rm -rf "$DIR"
          done
          git checkout --ours .gitignore || true
          git add .
          git commit -m "Sync with upstream (remove .github & .vscode, keep .gitignore)" || true

      - id: changes
        shell: bash
        run: |
          git diff upstream/master master -- . ':(exclude).github' ':(exclude).vscode' ':(exclude).gitignore' > changes.diff
          [ -s changes.diff ] && echo changes=true  >>$GITHUB_ENV || echo changes=false  >>$GITHUB_ENV

      - id: existing-prs
        shell: bash
        run: |
          PR=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  https://api.github.com/repos/${{ github.repository }}/pulls |
                jq -r '.[] | select(.head.ref|startswith("sync-upstream-")) | .head.ref' | tr '\n' ' ')
          [ -n "$PR" ] && { echo existing_pr=true >>$GITHUB_ENV; echo existing_pr_ref=$PR >>$GITHUB_ENV; } \
                        || echo existing_pr=false >>$GITHUB_ENV

      - name: Update existing master-sync PR
        if: env.existing_pr == 'true'
        shell: bash
        run: |
          BR=$(echo "${{ env.existing_pr_ref }}" | awk '{print $1}')
          git push origin master:"$BR" --force-with-lease

      - name: Create master-sync PR
        if: env.existing_pr == 'false' && env.changes == 'true'
        shell: bash
        run: |
          BR=sync-upstream-$(date +%Y%m%d%H%M%S)
          git checkout -b $BR
          git push origin $BR
          curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            -d '{"title":"Sync with upstream (remove .github & .vscode, keep .gitignore)","head":"'"$BR"'","base":"master"}'

      # ---------- master-ko ----------
      - id: existing-prs-ko
        shell: bash
        run: |
          PR=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  https://api.github.com/repos/${{ github.repository }}/pulls |
                jq -r '.[] | select(.head.ref|startswith("update-master-ko-")) | .head.ref' | tr '\n' ' ')
          [ -n "$PR" ] && { echo existing_pr_ko=true >>$GITHUB_ENV; echo existing_pr_ko_ref=$PR >>$GITHUB_ENV; } \
                        || echo existing_pr_ko=false >>$GITHUB_ENV

      - name: Prepare master-ko update
        shell: bash
        run: |
          set -euo pipefail
          git checkout master
          git fetch origin master-ko || true
          git checkout -B master-ko origin/master-ko || git checkout -B master-ko

          # 1) master-ko 패키지 백업
          cp package.json /tmp/pkg_old.json || true

          # 2) master → master-ko (src 제외) 복사
          git checkout master -- . ":(exclude)src"

          # 3) package.json 깊이 병합
          node <<'NODE'
          const fs = require('fs');
          const merge = (a,b)=>{for(const k in b){if(b[k]&&typeof b[k]==='object'&&!Array.isArray(b[k]))a[k]=merge(a[k]||{},b[k]);else if(!(k in a))a[k]=b[k];}return a;}
          const oldPkg = fs.existsSync('/tmp/pkg_old.json') ? JSON.parse(fs.readFileSync('/tmp/pkg_old.json','utf8')) : {};
          const newPkg = JSON.parse(fs.readFileSync('package.json','utf8'));
          ['dependencies','devDependencies','peerDependencies','scripts'].forEach(k=>{
            newPkg[k]=merge(newPkg[k]||{},oldPkg[k]||{});
          });
          fs.writeFileSync('package.json',JSON.stringify(newPkg,null,2)+'\n');
          NODE

          # 4) 로컬 전용 파일 복원(존재할 때만)
          for f in pnpm-lock.yaml .yarnrc.yml; do
            git ls-files --error-unmatch "$f" >/dev/null 2>&1 && git checkout master-ko -- "$f" || true
          done

          git add .
          git commit -m "Update master-ko (deep-merge package.json, keep local files)" || true

      - name: Push to existing master-ko PR
        if: env.existing_pr_ko == 'true'
        shell: bash
        run: |
          BR=$(echo "${{ env.existing_pr_ko_ref }}" | awk '{print $1}')
          git push origin master-ko:"$BR" --force-with-lease

      - name: Create master-ko PR
        if: env.existing_pr_ko == 'false'
        shell: bash
        run: |
          BR=update-master-ko-$(date +%Y%m%d%H%M%S)
          git checkout -b $BR
          git push origin $BR
          curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            -d '{"title":"Update master-ko (excluding src)","head":"'"$BR"'","base":"master-ko"}'
